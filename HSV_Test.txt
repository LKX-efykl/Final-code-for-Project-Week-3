import cv2
import numpy as np
from picamera2 import Picamera2
import time

def nothing(x):
    pass

# Initialize camera
camera = Picamera2()
camera_config = camera.create_video_configuration(main={"size": (320, 240), "format": "RGB888"})
camera.configure(camera_config)
camera.start()
time.sleep(1)

# Create a window for sliders
cv2.namedWindow('HSV Calibration')

# Create trackbars for color change
cv2.createTrackbar('H Lower', 'HSV Calibration', 0, 179, nothing)
cv2.createTrackbar('S Lower', 'HSV Calibration', 0, 255, nothing)
cv2.createTrackbar('V Lower', 'HSV Calibration', 0, 255, nothing)
cv2.createTrackbar('H Upper', 'HSV Calibration', 179, 179, nothing)
cv2.createTrackbar('S Upper', 'HSV Calibration', 255, 255, nothing)
cv2.createTrackbar('V Upper', 'HSV Calibration', 255, 255, nothing)

try:
    while True:
        # Capture frame
        frame = camera.capture_array()
        frame = cv2.cvtColor(frame, cv2.COLOR_RGB2BGR)
        
        # filter noice
        blurred = cv2.GaussianBlur(frame, (5,5), 0)
        
        # Convert to HSV
        hsv = cv2.cvtColor(blurred, cv2.COLOR_BGR2HSV)
        
        # Get trackbar positions
        h_lower = cv2.getTrackbarPos('H Lower', 'HSV Calibration')
        s_lower = cv2.getTrackbarPos('S Lower', 'HSV Calibration')
        v_lower = cv2.getTrackbarPos('V Lower', 'HSV Calibration')
        h_upper = cv2.getTrackbarPos('H Upper', 'HSV Calibration')
        s_upper = cv2.getTrackbarPos('S Upper', 'HSV Calibration')
        v_upper = cv2.getTrackbarPos('V Upper', 'HSV Calibration')
        
        # Define range of color and create a mask
        lower_color = np.array([h_lower, s_lower, v_lower])
        upper_color = np.array([h_upper, s_upper, v_upper])
        mask = cv2.inRange(hsv, lower_color, upper_color)
        
        # Display values
        cv2.putText(frame, f"Lower: [{h_lower}, {s_lower}, {v_lower}]", (10, 30), 
                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
        cv2.putText(frame, f"Upper: [{h_upper}, {s_upper}, {v_upper}]", (10, 60), 
                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
        
        # Show images
        cv2.imshow('Original', frame)
        cv2.imshow('Mask', mask)
        
        # Break on 'x' key
        if cv2.waitKey(1) & 0xFF == ord('x'):
            break

finally:
    camera.stop()
    cv2.destroyAllWindows()
    print(f"Final values:\nlower_color = np.array([{h_lower}, {s_lower}, {v_lower}])")
    print(f"upper_color = np.array([{h_upper}, {s_upper}, {v_upper}])")
